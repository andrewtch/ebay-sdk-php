<?php
/**
 * The contents of this file was generated using the WSDLs as provided by eBay.
 *
 * DO NOT EDIT THIS FILE!
 */

namespace DTS\eBaySDK\Trading\Types;

/**
 *
 * @property string $CallName
 * @property boolean $CountsTowardAggregate
 * @property integer $DailyHardLimit
 * @property integer $DailySoftLimit
 * @property integer $DailyUsage
 * @property integer $HourlyHardLimit
 * @property integer $HourlySoftLimit
 * @property integer $HourlyUsage
 * @property integer $Period
 * @property integer $PeriodicHardLimit
 * @property integer $PeriodicSoftLimit
 * @property integer $PeriodicUsage
 * @property \DateTime $PeriodicStartDate
 * @property \DateTime $ModTime
 * @property \DTS\eBaySDK\Trading\Enums\AccessRuleCurrentStatusCodeType $RuleCurrentStatus
 * @property \DTS\eBaySDK\Trading\Enums\AccessRuleStatusCodeType $RuleStatus
 */
class ApiAccessRuleType extends \DTS\eBaySDK\Types\BaseType
{
    /**
     * @var array Properties belonging to objects of this class.
     */
    private static $propertyTypes = [
        'CallName' => [
            'type' => 'string',
            'unbound' => false,
            'attribute' => false,
            'elementName' => 'CallName'
        ],
        'CountsTowardAggregate' => [
            'type' => 'boolean',
            'unbound' => false,
            'attribute' => false,
            'elementName' => 'CountsTowardAggregate'
        ],
        'DailyHardLimit' => [
            'type' => 'integer',
            'unbound' => false,
            'attribute' => false,
            'elementName' => 'DailyHardLimit'
        ],
        'DailySoftLimit' => [
            'type' => 'integer',
            'unbound' => false,
            'attribute' => false,
            'elementName' => 'DailySoftLimit'
        ],
        'DailyUsage' => [
            'type' => 'integer',
            'unbound' => false,
            'attribute' => false,
            'elementName' => 'DailyUsage'
        ],
        'HourlyHardLimit' => [
            'type' => 'integer',
            'unbound' => false,
            'attribute' => false,
            'elementName' => 'HourlyHardLimit'
        ],
        'HourlySoftLimit' => [
            'type' => 'integer',
            'unbound' => false,
            'attribute' => false,
            'elementName' => 'HourlySoftLimit'
        ],
        'HourlyUsage' => [
            'type' => 'integer',
            'unbound' => false,
            'attribute' => false,
            'elementName' => 'HourlyUsage'
        ],
        'Period' => [
            'type' => 'integer',
            'unbound' => false,
            'attribute' => false,
            'elementName' => 'Period'
        ],
        'PeriodicHardLimit' => [
            'type' => 'integer',
            'unbound' => false,
            'attribute' => false,
            'elementName' => 'PeriodicHardLimit'
        ],
        'PeriodicSoftLimit' => [
            'type' => 'integer',
            'unbound' => false,
            'attribute' => false,
            'elementName' => 'PeriodicSoftLimit'
        ],
        'PeriodicUsage' => [
            'type' => 'integer',
            'unbound' => false,
            'attribute' => false,
            'elementName' => 'PeriodicUsage'
        ],
        'PeriodicStartDate' => [
            'type' => 'DateTime',
            'unbound' => false,
            'attribute' => false,
            'elementName' => 'PeriodicStartDate'
        ],
        'ModTime' => [
            'type' => 'DateTime',
            'unbound' => false,
            'attribute' => false,
            'elementName' => 'ModTime'
        ],
        'RuleCurrentStatus' => [
            'type' => 'string',
            'unbound' => false,
            'attribute' => false,
            'elementName' => 'RuleCurrentStatus'
        ],
        'RuleStatus' => [
            'type' => 'string',
            'unbound' => false,
            'attribute' => false,
            'elementName' => 'RuleStatus'
        ]
    ];

    /**
     * @param array $values Optional properties and values to assign to the object.
     */
    public function __construct(array $values = [])
    {
        list($parentValues, $childValues) = self::getParentValues(self::$propertyTypes, $values);

        parent::__construct($parentValues);

        if (!array_key_exists(__CLASS__, self::$properties)) {
            self::$properties[__CLASS__] = array_merge(self::$properties[get_parent_class()], self::$propertyTypes);
        }

        if (!array_key_exists(__CLASS__, self::$xmlNamespaces)) {
            self::$xmlNamespaces[__CLASS__] = 'xmlns="urn:ebay:apis:eBLBaseComponents"';
        }

        $this->setValues(__CLASS__, $childValues);
    }
}
